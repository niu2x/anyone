$#include "main/model_manager.h"
$#include "main/model.h"
$#include "main/core.h"
$#include "main/attachment.h"
$#include "main/scene_node.h"
$#include "main/scene_manager.h"
$#include "platform/api/support.h"
$#include "texture_loader.h"
$#include "tolua_support.h"

namespace anyone {

class VertexBuffer{};
class IndiceBuffer{};
class Texture2D{};
class CubeMap{};
class Program{};

struct TextureLoader {
    static CubeMap* load_cube_map_png(const char* uri);
};

class RenderAPI {
    void destroy_vertex_buffer(VertexBuffer* vbo);
    void destroy_indice_buffer(IndiceBuffer* veo);
    void destroy_texture_2d(Texture2D* vbo);
    void destroy_cube_map(CubeMap* cb);
    void destroy_program(Program* p);
};

class Attachment{};

class Renderable: public Attachment {};

class Model: public Renderable {}

class ModelManager {
    Model* load_model(const char* name, const char* path);
    void unload_model(const char* name);
};

class PlatformSupport {
	void set_full_screen(bool);
	RenderAPI* get_render_api();
	void exit();
};

class Core {
	static Core* get_singleton_ptr();
	PlatformSupport* get_platform_support();
	ModelManager* get_model_manager();
	SceneManager* get_scene_manager();
};


class SceneManager {
    SceneNode* get_root_node();
    void set_sky_box(CubeMap* c);
};

class SceneNode {
    void attach_object(Renderable* a);
    void detach_object(Renderable* a);
    SceneNode* create_child_node(const char* name);
    SceneNode* get_child(const char* name);
    SceneNode* find_node(const char* name);
    void remove_child(const char* name);
    void remove_child(SceneNode*);
    void set_position(float x, float y, float z);
    void rotate_by_local_z_axis(float r);
    void rotate_by_local_x_axis(float r);
    void rotate_by_local_y_axis(float r);
};

}
