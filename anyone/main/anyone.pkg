$#include "main/model_manager.h"
$#include "main/model.h"
$#include "main/core.h"
$#include "main/attachment.h"
$#include "main/scene_node.h"
$#include "main/scene_manager.h"
$#include "main/lua_support.h"
$#include "platform/api/support.h"
$#include "texture_loader.h"
$#include "tolua_support.h"

struct kmMat4 {};
struct kmVec3 {kmScalar x,y,z;};

namespace anyone {

class VertexBuffer{};
class IndiceBuffer{};
class Texture2D{};
class CubeMap{};
class Program{};

class Camera {
    void set_eye(float x, float y, float z);
    void look_at(float x, float y, float z);
    void set_up(float x, float y, float z);

    const kmMat4* get_view_matrix() const;
    const kmMat4* get_proj_matrix() const;

    void set_aspect(float a);
    void set_fov(float a);

    void set_near_clip(float a);
    void set_far_clip(float a);

    void apply();

    const kmVec3* get_eye() const;
}

struct TextureLoader {
    static CubeMap* load_cube_map_png(const char* uri);
};

class CoreEventListener{
};

class LuaCoreEventListener: CoreEventListener {
    LuaCoreEventListener();
    ~LuaCoreEventListener();
    void set_proxy(LUA_TABLE table);
};

class RenderAPI {
    void destroy_vertex_buffer(VertexBuffer* vbo);
    void destroy_indice_buffer(IndiceBuffer* veo);
    void destroy_texture_2d(Texture2D* vbo);
    void destroy_cube_map(CubeMap* cb);
    void destroy_program(Program* p);
};

class Attachment{};

class Renderable: public Attachment {};

class Model: public Renderable {}

class ModelManager {
    Model* load_model(const char* name, const char* path);
    void unload_model(const char* name);
};

class PlatformSupport {
    void set_full_screen(bool);
    RenderAPI* get_render_api();
    void exit();
    bool is_full_screen() const;
};

class Core {
    static Core* get_singleton_ptr();
    PlatformSupport* get_platform_support();
    ModelManager* get_model_manager();
    SceneManager* get_scene_manager();
    void add_core_event_listener(CoreEventListener* l);
    Camera* get_camera();
};


class SceneManager {
    SceneNode* get_root_node();
    void set_sky_box(CubeMap* c);
};

class SceneNode {
    void attach_object(Renderable* a);
    void detach_object(Renderable* a);
    SceneNode* create_child_node(const char* name);
    SceneNode* get_child(const char* name);
    SceneNode* find_node(const char* name);
    void remove_child(const char* name);
    void remove_child(SceneNode*);
    void set_position(float x, float y, float z);
    void rotate_by_local_z_axis(float r);
    void rotate_by_local_x_axis(float r);
    void rotate_by_local_y_axis(float r);
};

}
